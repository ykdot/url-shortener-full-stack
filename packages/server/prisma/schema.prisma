// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement()) // SERIAL PRIMARY KEY
  username String @db.VarChar(25)
  email    String @db.VarChar(25)
  password String @db.VarChar(100)

  // This creates the one-to-many relationship: one User can have many Urls.
  urls     Url[]
  @@map("users")
}

model Admin {
  id       Int    @id @default(autoincrement()) // SERIAL PRIMARY KEY
  username String @unique @db.VarChar(25)
  email    String @unique @db.VarChar(25)
  password String @db.VarChar(100)
  @@map("admin")
}

model Url {
  id         BigInt   @id @default(autoincrement()) // BIGSERIAL PRIMARY KEY
  short_code String?   @unique @db.VarChar(15)
  date       DateTime @db.Date
  long_url   String   @db.VarChar(100)

  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  clicks     Click[]
  analytics  UrlAnalytics?
  @@map("urls")
}

model Click {
  id          BigInt    @id @default(autoincrement())
  short_code   String    @db.VarChar(15)
  timestamp   DateTime  @default(now()) @db.Timestamptz
  ip_address   String?   @db.VarChar(45)
  user_agent   String?   @db.VarChar(512)

  url         Url       @relation(fields: [short_code], references: [short_code], onDelete: Cascade)
  @@map("clicks")
}

model UrlAnalytics {
  id         BigInt @id @default(autoincrement()) // It's good practice to have a primary key.
  short_code String @unique @db.VarChar(15)
  clicks     BigInt
  url        Url    @relation(fields: [short_code], references: [short_code], onDelete: Cascade)
  @@map("url_analytics")
}